getwd()
library(readr)
x_human_coverage_all_AR_corr <- read_delim("plots/compare_human/x_human_coverage_all_AR_corr.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(x_human_coverage_all_AR_corr)
x_human <- read_delim("plots/compare_human/x_human_coverage_all_AR_corr.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
library(readr)
x_human <- read_delim("plots/compare_human/x_human_coverage_all_AR_corr.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(x_human)
x_human[x_human$AR == 6_0] = "hat"
x_human[x_human$AR == 6_0,] = "hat"
x_human[x_human$AR == 6_0,]$AR = "hat"
x_human[x_human$AR == "6_0",]$AR = "hat"
x_human <- read_delim("plots/compare_human/x_human_coverage_all_AR_corr.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
x_human[x_human$AR == "6_0",]$gene = "hat"
library(readr)
library(tidyverse)
x_human = x_human %>%
mutate(gene = hat)
x_human = x_human %>%
mutate(gene = "hat")
?case_when
x_human[x_human$AR == "6_0",]$genet = "hat"
x_human = x_human %>%
mutate(gene = case_when(
AR == "6_0" ~ "GAGE4"
))
x_human <- read_delim("plots/compare_human/x_human_coverage_all_AR_corr.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
x_human = x_human %>%
mutate(gene = case_when(
AR == "6_0" ~ "GAGE4",
AR == "24_0" ~ "CT47A4",
AR == "26_0" ~ "CT45A5",
AR == "27_0" ~ "SPANXB1",
AR == "32_0" ~ "OPN1LW",
))
x_human$gene != NA
x_human$AR[x_human$gene != NA,]
x_human[x_human$gene != NA,]$AR
x_human[x_human$gene == NA,]$AR
x_human[is.na(x_human$gene),]$AR
x_human[!is.na(x_human$gene),]$AR
!is.na(x_human$gene)
#remove NAs
x_human = x_human[!is.na(x_human$gene),]
# Y
y_human <- read_delim("plots/compare_human/y_human_coverage_all_AR_corr.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(y_human)
boxplot(x_human[x_human$gene == "GAGE4",]$normalized_cov)
unique(y_human$AR)
y_human$AR == "BPY2"
library(readr)
library(tidyverse)
# X
x_human <- read_delim("plots/compare_human/x_human_coverage_all_AR_corr.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
# Translate into gene names
x_human = x_human %>%
mutate(gene = case_when(
AR == "6_0" ~ "GAGE4",
AR == "24_0" ~ "CT47A4",
AR == "26_0" ~ "CT45A5",
AR == "27_0" ~ "SPANXB1",
AR == "32_0" ~ "OPN1LW",
))
#boxplot(x_human[x_human$gene == "GAGE4",]$normalized_cov)
# Y
y_human <- read_delim("plots/compare_human/y_human_coverage_all_AR_corr.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
library(readr)
library(tidyverse)
setwd("/Volumes/GenomeDK/simons/faststorage/people/carl/coverage/plots/pdf2")
#getwd()
#setwd("..")
df <- read_csv("../full.csv")[,-1]
get_non_amp_reg = function(chromosome) {
if(chromosome == "X") {
return("DMD")}
else if(chromosome == "Y") {
return("AMELY")}
else
return(NA)}
expand_species = function(species) {
if(species == "chimp") {
return("Chimpanzee")}
else if(species == "gorilla") {
return("Gorilla")}
else
return(NA)}
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ncount = df[df$ind == ind & df$gene == "DMD",]$count)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ncount = df[df$ind == ind & df$gene == "DMD",]$count[1:44])
#mutate(ncount = c(ind, "fuck"))
View(xdf)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind, gene) %>%
summarise(ind = ind,
species = species,
sex = sex,
chrom = chrom,
gene = gene,
pos = pos,
count = count)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind, gene) %>%
summarise(ind2 = ind,
species = species,
sex = sex,
chrom = chrom,
gene = gene,
pos = pos,
count = count)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind, gene) %>%
summarise(ind2 = ind,
species = species,
sex = sex,
chrom = chrom,
gene2 = gene,
pos = pos,
count = count)
rm(xdf)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind, gene) %>%
summarise(ind2 = ind,
species = species,
sex = sex,
chrom = chrom,
gene2 = gene,
pos = pos,
count = count)
rm(xdf)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind, gene) %>%
summarise(species = species,
sex = sex,
chrom = chrom,
gene2 = gene,
pos = pos,
count = count)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind, gene) %>%
summarise(count = count)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind) %>%
summarise(species = species,
sex = sex,
chrom = chrom,
#gene2 = gene,
pos = pos,
count = count)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind) %>%
summarise(species = species[1],
sex = sex,
chrom = chrom,
#gene2 = gene,
pos = pos,
count = count)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind) %>%
summarise(species = species[1],
sex = sex,
chrom = chrom,
#gene2 = gene,
pos = pos,
count = count)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind) %>%
summarise(ind2 = ind,
species = species,
sex = sex,
chrom = chrom,
#gene2 = gene,
pos = pos,
count = count)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind, gene) %>%
summarise(ind2 = ind,
species = species,
sex = sex,
chrom = chrom,
#gene2 = gene,
pos = pos,
count = count)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind) %>%
mutate(norm_count = df[df$ind = ind,]$count)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind) %>%
mutate(norm_count = df[df$ind == ind,]$count)
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind) %>%
mutate(norm_count = paste(df[df$ind == ind,]$count))
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
#group_by(ind) %>%
mutate(norm_count = paste(df[df$ind == ind,]$count))
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
#group_by(ind) %>%
mutate(norm_count = paste(df[df$ind == ind,]$count))
xdf = df[df$chrom == 'X',] %>%
#group_by(ind) %>%
mutate(norm_count = paste(df[df$ind == ind,]$count))
# er det her en test?
xdf = df[df$chrom == 'X',] %>%
group_by(ind) %>%
mutate(normalized = count / df[df$gene == "DMD" & df$ind == ind,]$count)
install.packages(c("DBI", "Formula", "MASS", "Matrix", "ade4", "alr4", "ape", "bindrcpp", "broom", "callr", "carData", "cluster", "coxme", "curl", "data.table", "ddalpha", "foreign", "glmnet", "htmlwidgets", "httpuv", "kernlab", "lme4", "lmtest", "lubridate", "maps", "modelr", "nlme", "packrat", "pillar", "plogr", "prodlim", "psych", "readxl", "rgl", "robustbase", "selectr", "sourcetools", "spam", "stringi", "stringr", "survival", "vcfR", "vegan", "withr", "yaml"))
